class Solution {
    static boolean isValid(int r, int c, int rows, int cols, boolean[][] visited, char[][] grid) {
        return (r >= 0 && r < rows && c >= 0 && c < cols &&
                grid[r][c] == '1' && !visited[r][c]);
    }
    static void bfs(char[][] grid, int sr, int sc, boolean[][] visited) {
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{sr, sc});
        visited[sr][sc] = true;
        int[] dr = {-1,0, 0, 1};
        int[] dc = {0,-1, 1, 0};
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int r = curr[0];
            int c = curr[1];
            for (int k = 0; k < 4; k++) {
                int nr = r + dr[k];
                int nc = c + dc[k];
                if (isValid(nr, nc, rows, cols, visited, grid)) {
                    visited[nr][nc] = true;
                    q.add(new int[]{nr, nc});
                }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];
        int islands = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    bfs(grid, i, j, visited);
                    islands++;
                }
            }
        }
        return islands;
    }
}
