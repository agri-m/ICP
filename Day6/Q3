class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates); 
        helper(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }

    public void helper(int[] candidates, int target, int start, List<Integer> temp, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }

        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1]){
                continue;
            }
            if (candidates[i] > target){
                break; 
            }
            temp.add(candidates[i]);
            helper(candidates, target - candidates[i], i + 1, temp, res); 
            temp.remove(temp.size() - 1); 
        }
    }
}
